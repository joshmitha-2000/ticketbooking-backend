generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  confirmed Boolean   @default(false)
  bookings  Booking[]
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  movies Movie[]
}

model Movie {
  id             Int             @id @default(autoincrement())
  title          String
  description    String
  posterUrl      String
  runtime        Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  categoryId     Int?
  price          Int
  category       Category?       @relation(fields: [categoryId], references: [id])
  availableDates MovieDate[]
  languageTags   MovieLanguage[]
  shows          Show[]
}
model MovieLanguage {
  id       Int    @id @default(autoincrement())
  language String
  movieId  Int
  movie    Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([language, movieId])
}


model MovieDate {
  id      Int      @id @default(autoincrement())
  date    DateTime
  movieId Int
  movie   Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([date, movieId])
}

model Theatre {
  id           Int      @id @default(autoincrement())
  name         String
  location     String
  seatCapacity Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  seats        Seat[]
  shows        Show[]
}

model Show {
  id        Int       @id @default(autoincrement())
  movieId   Int
  theatreId Int
  showTime  DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  seats     Seat[]
  movie     Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  theatre   Theatre   @relation(fields: [theatreId], references: [id])
}
model Seat {
  id         Int      @id @default(autoincrement())
  seatNumber String
  showId     Int
  bookingId  Int?
  isBooked   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  seatType   String
  theatreId  Int?
  booking    Booking? @relation(fields: [bookingId], references: [id])
  show       Show     @relation(fields: [showId], references: [id])
  theatre    Theatre? @relation(fields: [theatreId], references: [id])

  @@unique([seatNumber, showId])
}

model Booking {
  id         Int           @id @default(autoincrement())
  userId     Int
  showId     Int
  totalPrice Float
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  status     BookingStatus @default(PENDING)
  show       Show          @relation(fields: [showId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
  seats      Seat[]
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
